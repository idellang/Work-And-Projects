-- load horizontal data to neo4j
LOAD CSV WITH HEADERS
FROM 'file:///dhl_series'
AS line
MERGE(p:Location{name:line.pickup_location})
MERGE(d1:Location{name:line.dropoff_1})
MERGE(d2:Location{name:line.dropoff_2})
MERGE(d3:Location{name:line.dropoff_3})
MERGE(d4:Location{name:line.dropoff_4})
MERGE(p)-[t1:TRIP]->(d1)-[t2:TRIP]->(d2)-[t3:TRIP]->(d3)-[t4:TRIP]->(d4)
ON CREATE SET
	t1.trip_number = toInteger(line.trip_number),
    t1.plate_no = line.vehicle_plate_no,
    t2.trip_number = toInteger(line.trip_number),
    t2.plate_no = line.vehicle_plate_no,
    t3.trip_number = toInteger(line.trip_number),
    t3.plate_no = line.vehicle_plate_no,
    t4.trip_number = toInteger(line.trip_number),
    t4.plate_no = line.vehicle_plate_no

LOAD CSV WITH HEADERS
FROM 'file:///dhl2_series.csv'
AS line
MERGE(p:Location{name:line.pickup_location})
MERGE(d1:Location{name:line.dropoff_1})
MERGE(d2:Location{name:line.dropoff_2})
MERGE(d3:Location{name:line.dropoff_3})
MERGE(d4:Location{name:line.dropoff_4})
MERGE(d5:Location{name:line.dropoff_5})
MERGE(d6:Location{name:line.dropoff_6})
MERGE(d7:Location{name:line.dropoff_7})
MERGE(p)-[t1:TRIP]->(d1)
MERGE (d1)-[t2:TRIP]->(d2)
MERGE (d2)-[t3:TRIP]->(d3)
MERGE (d3)-[t4:TRIP]->(d4)
MERGE (d4)-[t5:TRIP]->(d5)
MERGE (d5)-[t6:TRIP]->(d6)
MERGE (d6)-[t7:TRIP]->(d7)
ON CREATE SET
	t1 = {trip_number:toInteger(line.trip_number), plate_no: line.vehicle_plate_no, month: toInteger(line.month_pickup), day:toInteger(line.day_pickup)},
	t2 = {trip_number:toInteger(line.trip_number), plate_no: line.vehicle_plate_no, month: toInteger(line.month_pickup), day:toInteger(line.day_pickup)},
	t3 = {trip_number:toInteger(line.trip_number), plate_no: line.vehicle_plate_no, month: toInteger(line.month_pickup), day:toInteger(line.day_pickup)},
	t4 = {trip_number:toInteger(line.trip_number), plate_no: line.vehicle_plate_no, month: toInteger(line.month_pickup), day:toInteger(line.day_pickup)},
	t5 = {trip_number:toInteger(line.trip_number), plate_no: line.vehicle_plate_no, month: toInteger(line.month_pickup), day:toInteger(line.day_pickup)},
	t6 = {trip_number:toInteger(line.trip_number), plate_no: line.vehicle_plate_no, month: toInteger(line.month_pickup), day:toInteger(line.day_pickup)},
	t7 = {trip_number:toInteger(line.trip_number), plate_no: line.vehicle_plate_no, month: toInteger(line.month_pickup), day:toInteger(line.day_pickup)}	
	

-- sample queries
	
MATCH trip = ((:Location)-[t:TRIP]-(:Location))
WHERE t.trip_number = 7300108519
RETURN trip

--trips on nov 8
MATCH trip = ((:Location)-[t:TRIP]-(:Location))
WHERE t.month = 11 AND t.day = 8
RETURN trip

--trip for plate no 
MATCH trip = ((:Location)-[t:TRIP]-(:Location))
WHERE t.plate_no = 'CAE4687'
RETURN trip

--all trips
MATCH p=()-[r:TRIP]->() RETURN p 

--trips of san ford
MATCH (l:Location)-[t:TRIP]-(:Location)
WHERE l.name CONTAINS 'SANFORD'
WITH t.trip_number AS trip
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE t.trip_number IN trip
RETURN path

--dates of trip number 8519
MATCH trip = ((d1:Location)-[t:TRIP]-(d2:Location))
WHERE t.trip_number = 7300108519
RETURN d1.name AS location, d2.name AS next_location, t.month, t.day, t.dropoff_order

--number of trips on a on november 7
MATCH trip = ((:Location)-[t:TRIP]-(:Location))
RETURN t.month, t.day, count(trip)
ORDER BY t.month, t.day

--distinct trips
MATCH trip = ((:Location)-[t:TRIP]-(:Location))
WHERE t.month = 11 AND t.day = 7
RETURN count(DISTINCT t.trip_number)

--location with most number of travels
MATCH trip = ((d1:Location)-[t:TRIP]->(d2:Location))
RETURN d2.name, COUNT(t.trip_number),  collect(distinct t.trip_number) AS trips,  collect(d1.name) AS previous_locations
ORDER BY COUNT(t.trip_number) DESC 

-- tabular detail
MATCH trip = ((d1:Location)-[t:TRIP]->(d2:Location))
WHERE t.trip_number = 7300108519
RETURN t.trip_number, d1.name, d2.name, t.travel_distance

--distance traveled per trip
MATCH trip = ((d1:Location)-[t:TRIP]->(d2:Location))
WITH  t.trip_number AS trip_number, SUM(t.travel_distance) as travel_distance
RETURN trip_number, travel_distance
ORDER BY travel_distance DESC

-- trip number, distance traveled, and locations passed
MATCH trip = ((d1:Location)-[t:TRIP]->(d2:Location))
WITH t.trip_number AS trip_number, t.travel_distance AS travel_distance, d1.name AS source, d2.name AS destination
WITH trip_number, SUM(travel_distance) AS total_distance, collect(source) + collect(destination) AS locations
WITH trip_number, total_distance, locations
UNWIND locations AS location
RETURN trip_number, total_distance, collect(distinct location)
ORDER BY total_distance DESC



--load second model
LOAD CSV WITH HEADERS
FROM 'file:///dhl_model2.csv'
AS line
MATCH(l1:Location{name:line.location})
MATCH(l2:Location{name:line.next_location})
MERGE(l1)-[t:TRIP]->(l2)
ON CREATE SET 
	t.trip_number = toInteger(line.trip_number),
    t.dropoff_order = toInteger(line.dropoff_series),
    t.plate_no = line.vehicle_plate_no,
    t.month = toInteger(line.month),
    t.day = toInteger(line.day),
    t.status = line.dropoff_status

	
MATCH trip = ((:Location)-[t:TRIP]-(:Location))
WITH DATE(t.date) AS date, t.trip_number AS trip_number
RETURN trip_number, date, date.month, date.year, date.day

    
   MATCH trip = ((:Location)-[t:TRIP]-(:Location))
WHERE t.date.month = 10 AND t.date.day = 26
RETURN trip



-- first and last elements
MATCH trip = ((:Location)-[t:TRIP]->(:Location))
WHERE t.trip_number = 7300108519
WITH nodes(trip) AS locations
UNWIND locations as location
WITH collect(location.name) AS locations
RETURN locations[0],locations[-1]