LOAD CSV WITH HEADERS
FROM 'file:///dhl_model2.csv'
AS line
MATCH(l1:Location{name:line.location})
MATCH(l2:Location{name:line.next_location})
MERGE(l1)-[t:TRIP]->(l2)
ON CREATE SET 
	t.trip_number = toInteger(line.trip_number),
    t.dropoff_order = toInteger(line.dropoff_series),
    t.plate_no = line.vehicle_plate_no,
    t.month = toInteger(line.month),
    t.day = toInteger(line.day),
    t.status = line.dropoff_status
	
	
	
	
-- Sample queries

-- Query using a trip number
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE t.trip_number = 7300108519
RETURN path

-- Query using trip number
-- trips by vehicle ABC 7414
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE t.plate_no = 'ABC 7414'
RETURN path


--Query using status
-- trips that are completed
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE t.status = 'Completed'
RETURN path
LIMIT 100

-- QUery using date
-- Trips on November 11
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE t.month = 11 AND t.day =  14
RETURN path
LIMIT 100

--combination of date and status
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE t.month = 11 AND t.day =  14 AND t.status = 'Completed'
RETURN path
LIMIT 100


--All trips containing san ford
MATCH (l:Location)-[t:TRIP]-(:Location)
WHERE l.name CONTAINS  'SANFORD'
WITH t.trip_number AS trip_number
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE t.trip_number IN trip_number
RETURN path 
LIMIT 100

-- all trips containing san ford on November
MATCH (l:Location)-[t:TRIP]-(:Location)
WHERE 
	l.name CONTAINS  'SANFORD'
WITH 
	t.trip_number AS trip_number
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE
	t.trip_number IN trip_number 
AND
	t.month = 11	
RETURN path 
LIMIT 100



-- Trip where the vehicle passed thru tayuman and bambang
MATCH (l1:Location)-[t1:TRIP]-(:Location)
MATCH (l2:Location)-[t2:TRIP]-(:Location)
WHERE l1.name CONTAINS 'TAYUMAN'
AND l2.name CONTAINS 'BAMBANG'
AND t1.trip_number = t2.trip_number
WITH t1.trip_number AS common_trips
MATCH path= ((:Location)-[t:TRIP]-(:Location))
WHERE t.trip_number IN common_trips
RETURN path

-- plate number with the most number of distinct trips
MATCH (:Location)-[t:TRIP]-(:Location)
WITH t.plate_no AS vehicle, COUNT(DISTINCT t.trip_number) AS num_trips
RETURN vehicle, num_trips
ORDER BY num_trips DESC


-- dates of trip by AVA
MATCH path = ((:Location)-[t:TRIP]-(:Location))
WHERE t.plate_no = 'AVA 3336'
RETURN t.month, t.day, t.trip_number
ORDER BY t.month ASC, t.day ASC

-- must number of connections from south mega dc
MATCH(l1:Location)-[t:TRIP]-(l2:Location)
WHERE l1.name = '8420 South Mega DC'
WITH COUNT(t.trip_number) AS num_trips, l2.name as next_location
RETURN next_location, num_trips
ORDER BY num_trips DESC

-- locations that are not connected in BCFG in anyway 
-- not working
MATCH (l1:Location)-[t1:TRIP]-(l2:Location)
MATCH (l3:Location)-[t2:TRIP]-(:Location)
WHERE t1.trip_number <> t2.trip_number
RETURN l3.name

--not working
MATCH (l1:Location)-[:TRIP*1..4]-(l2:Location)
WHERE l1.name CONTAINS 'BCFG'
WITH l2 AS bcfg_connections
MATCH (l3:Location)
WHERE NOT (l3)-[:TRIP]-(bcfg_connections)
RETURN DISTINCT (l3.name)

-- not working
MATCH (l1:Location)-[:TRIP*1..4]-(l2:Location)
WHERE l1.name CONTAINS 'BCFG'
WITH DISTINCT l2.name AS bcfg_connections
MATCH (l3:Location)
WHERE NOT l3.name IN  bcfg_connections
RETURN DISTINCT l3.name

